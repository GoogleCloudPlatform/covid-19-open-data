# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import datetime
import requests
from functools import partial
from pathlib import Path
from typing import Dict, List, Any
from pandas import concat, DataFrame
from lib.concurrent import thread_map
from lib.data_source import DataSource
from lib.metadata_utils import country_subregion1s, country_subregion2s
from lib.utils import table_merge, table_rename

_subregion1_code_to_api_id_map = {
    "AC": 1,
    "BA": 2,
    "BT": 3,
    "BE": 4,
    "YO": 5,
    "JK": 6,
    "GO": 7,
    "JA": 8,
    "JB": 9,
    "JT": 10,
    "JI": 11,
    "KB": 12,
    "KS": 13,
    "KT": 14,
    "KI": 15,
    "KU": 16,
    "BB": 17,
    "KR": 18,
    "LA": 19,
    "MA": 20,
    "MU": 21,
    "NB": 22,
    "NT": 23,
    "PA": 24,
    "PB": 25,
    "RI": 26,
    "SR": 27,
    "SN": 28,
    "ST": 29,
    "SG": 30,
    "SA": 31,
    "SB": 32,
    "SS": 33,
    "SU": 34,
}

_subregion2_code_to_api_id_map = {
    "1101": 262,
    "1102": 266,
    "1103": 267,
    "1104": 265,
    "1105": 258,
    "1106": 260,
    "1107": 276,
    "1108": 268,
    "1109": 279,
    "1110": 263,
    "1111": 271,
    "1112": 259,
    "1113": 272,
    "1114": 261,
    "1115": 275,
    "1116": 264,
    "1117": 270,
    "1118": 277,
    "1171": 269,
    "1172": 278,
    "1173": 274,
    "1174": 273,
    "1175": 280,
    "5101": 6,
    "5102": 9,
    "5103": 1,
    "5104": 5,
    "5105": 8,
    "5106": 2,
    "5107": 7,
    "5108": 3,
    "5171": 4,
    "1901": 10,
    "1902": 14,
    "1903": 12,
    "1904": 13,
    "1905": 11,
    "1906": 15,
    "1971": 16,
    "1701": 26,
    "1702": 33,
    "1703": 28,
    "1704": 29,
    "1705": 34,
    "1706": 32,
    "1707": 31,
    "1708": 30,
    "1709": 27,
    "1771": 25,
    "3601": 19,
    "3602": 18,
    "3603": 22,
    "3604": 20,
    "3671": 23,
    "3672": 17,
    "3673": 21,
    "3674": 24,
    "7501": 48,
    "7502": 46,
    "7503": 47,
    "7504": 51,
    "7505": 50,
    "7571": 49,
    "1501": 55,
    "1502": 56,
    "1503": 58,
    "1504": 52,
    "1505": 57,
    "1506": 60,
    "1507": 61,
    "1508": 53,
    "1509": 62,
    "1571": 54,
    "1572": 59,
    "3201": 69,
    "3202": 84,
    "3203": 72,
    "3204": 63,
    "3205": 77,
    "3206": 87,
    "3207": 71,
    "3208": 80,
    "3209": 74,
    "3210": 81,
    "3211": 86,
    "3212": 78,
    "3213": 83,
    "3214": 82,
    "3215": 79,
    "3216": 67,
    "3217": 65,
    "3218": 498,
    "3271": 70,
    "3272": 85,
    "3273": 64,
    "3274": 75,
    "3275": 68,
    "3276": 76,
    "3277": 73,
    "3278": 88,
    "3279": 66,
    "3501": 147,
    "3502": 151,
    "3503": 159,
    "3504": 161,
    "3505": 127,
    "3506": 134,
    "3507": 141,
    "3508": 137,
    "3509": 132,
    "3510": 125,
    "3511": 130,
    "3512": 156,
    "3513": 152,
    "3514": 149,
    "3515": 155,
    "3516": 143,
    "3517": 133,
    "3518": 145,
    "3519": 138,
    "3520": 140,
    "3521": 146,
    "3522": 129,
    "3523": 160,
    "3524": 136,
    "3525": 131,
    "3526": 124,
    "3527": 154,
    "3528": 148,
    "3529": 157,
    "3571": 135,
    "3572": 128,
    "3573": 142,
    "3574": 153,
    "3575": 150,
    "3576": 144,
    "3577": 139,
    "3578": 158,
    "3579": 126,
    "3101": 45,
    "3171": 41,
    "3172": 44,
    "3173": 40,
    "3174": 42,
    "3175": 43,
    "3301": 95,
    "3302": 90,
    "3303": 110,
    "3304": 89,
    "3305": 100,
    "3306": 111,
    "3307": 123,
    "3308": 104,
    "3309": 93,
    "3310": 102,
    "3311": 117,
    "3312": 122,
    "3313": 99,
    "3314": 116,
    "3315": 97,
    "3316": 92,
    "3317": 112,
    "3318": 106,
    "3319": 103,
    "3320": 98,
    "3321": 96,
    "3322": 114,
    "3323": 121,
    "3324": 101,
    "3325": 91,
    "3326": 107,
    "3327": 109,
    "3328": 119,
    "3329": 94,
    "3371": 105,
    "3372": 118,
    "3373": 113,
    "3374": 115,
    "3375": 108,
    "3376": 120,
    "6101": 171,
    "6102": 169,
    "6103": 172,
    "6104": 165,
    "6105": 175,
    "6106": 163,
    "6107": 162,
    "6108": 167,
    "6109": 173,
    "6110": 168,
    "6111": 164,
    "6112": 166,
    "6171": 170,
    "6172": 174,
    "6401": 212,
    "6402": 208,
    "6403": 204,
    "6407": 207,
    "6408": 209,
    "6409": 213,
    "6411": 502,
    "6471": 203,
    "6472": 214,
    "6474": 205,
    "2101": 218,
    "2102": 219,
    "2103": 222,
    "2104": 221,
    "2105": 220,
    "2171": 217,
    "2172": 223,
    "6301": 187,
    "6302": 184,
    "6303": 177,
    "6304": 180,
    "6305": 188,
    "6306": 181,
    "6307": 182,
    "6308": 183,
    "6309": 185,
    "6310": 186,
    "6311": 176,
    "6371": 179,
    "6372": 178,
    "6201": 195,
    "6202": 196,
    "6203": 193,
    "6204": 189,
    "6205": 191,
    "6206": 194,
    "6207": 201,
    "6208": 202,
    "6209": 197,
    "6210": 192,
    "6211": 200,
    "6212": 198,
    "6213": 190,
    "6271": 199,
    "6501": 206,
    "6502": 210,
    "6503": 211,
    "6504": 215,
    "6571": 216,
    "1801": 226,
    "1802": 227,
    "1803": 229,
    "1804": 225,
    "1805": 235,
    "1806": 234,
    "1807": 228,
    "1808": 237,
    "1809": 232,
    "1810": 233,
    "1811": 230,
    "1812": 236,
    "1813": 499,
    "1871": 224,
    "1872": 231,
    "8101": 243,
    "8102": 244,
    "8103": 245,
    "8104": 239,
    "8105": 247,
    "8106": 246,
    "8107": 241,
    "8108": 242,
    "8109": 240,
    "8171": 238,
    "8172": 248,
    "8201": 249,
    "8202": 251,
    "8203": 253,
    "8204": 250,
    "8205": 254,
    "8206": 252,
    "8207": 255,
    "8208": 503,
    "8271": 256,
    "8272": 257,
    "5201": 284,
    "5202": 285,
    "5203": 286,
    "5204": 289,
    "5205": 283,
    "5206": 281,
    "5207": 290,
    "5208": 287,
    "5271": 288,
    "5272": 282,
    "5301": 295,
    "5302": 310,
    "5303": 311,
    "5304": 292,
    "5305": 291,
    "5306": 294,
    "5307": 305,
    "5308": 293,
    "5309": 302,
    "5310": 298,
    "5311": 309,
    "5312": 306,
    "5313": 297,
    "5314": 303,
    "5315": 299,
    "5316": 301,
    "5317": 308,
    "5318": 307,
    "5319": 300,
    "5320": 304,
    "5321": 504,
    "5371": 296,
    "9101": 327,
    "9102": 320,
    "9103": 318,
    "9104": 329,
    "9105": 322,
    "9106": 313,
    "9107": 334,
    "9108": 331,
    "9109": 328,
    "9110": 335,
    "9111": 321,
    "9112": 332,
    "9113": 339,
    "9114": 337,
    "9115": 338,
    "9116": 314,
    "9117": 326,
    "9118": 312,
    "9119": 336,
    "9120": 324,
    "9121": 325,
    "9122": 340,
    "9123": 323,
    "9124": 330,
    "9125": 333,
    "9126": 316,
    "9127": 317,
    "9128": 315,
    "9171": 319,
    "9201": 346,
    "9202": 343,
    "9203": 341,
    "9204": 348,
    "9205": 345,
    "9206": 350,
    "9207": 351,
    "9208": 342,
    "9209": 349,
    "9210": 344,
    "9211": 500,
    "9212": 501,
    "9271": 347,
    "1401": 356,
    "1402": 355,
    "1403": 352,
    "1404": 354,
    "1405": 359,
    "1406": 361,
    "1407": 360,
    "1408": 362,
    "1409": 357,
    "1410": 497,
    "1471": 358,
    "1472": 353,
    "7101": 416,
    "7102": 425,
    "7103": 420,
    "7104": 422,
    "7105": 426,
    "7106": 428,
    "7107": 427,
    "7108": 419,
    "7109": 421,
    "7110": 418,
    "7111": 417,
    "7171": 424,
    "7172": 415,
    "7173": 429,
    "7174": 423,
    "1301": 442,
    "1302": 445,
    "1303": 444,
    "1304": 448,
    "1305": 437,
    "1306": 430,
    "1307": 434,
    "1308": 439,
    "1309": 433,
    "1310": 432,
    "1311": 447,
    "1312": 440,
    "1371": 435,
    "1372": 446,
    "1373": 443,
    "1374": 436,
    "1375": 431,
    "1376": 441,
    "1377": 438,
    "7401": 408,
    "7402": 410,
    "7403": 413,
    "7404": 405,
    "7405": 411,
    "7406": 404,
    "7407": 414,
    "7408": 409,
    "7409": 412,
    "7410": 406,
    "7411": 511,
    "7412": 512,
    "7413": 510,
    "7414": 508,
    "7415": 509,
    "7471": 407,
    "7472": 403,
    "7301": 384,
    "7302": 371,
    "7303": 368,
    "7304": 374,
    "7305": 388,
    "7306": 373,
    "7307": 386,
    "7308": 370,
    "7309": 379,
    "7310": 381,
    "7311": 369,
    "7312": 387,
    "7313": 391,
    "7314": 385,
    "7315": 383,
    "7316": 372,
    "7317": 375,
    "7318": 389,
    "7322": 377,
    "7324": 376,
    "7326": 390,
    "7371": 378,
    "7372": 382,
    "7373": 380,
    "7601": 366,
    "7602": 365,
    "7603": 364,
    "7604": 367,
    "7605": 363,
    "7606": 505,
    "1601": 458,
    "1602": 457,
    "1603": 453,
    "1604": 451,
    "1605": 455,
    "1606": 454,
    "1607": 449,
    "1608": 460,
    "1609": 459,
    "1610": 456,
    "1611": 450,
    "1612": 514,
    "1613": 513,
    "1671": 462,
    "1672": 461,
    "1673": 452,
    "1674": 463,
    "7201": 392,
    "7202": 399,
    "7203": 395,
    "7204": 402,
    "7205": 394,
    "7206": 396,
    "7207": 393,
    "7208": 398,
    "7209": 401,
    "7210": 400,
    "7211": 506,
    "7212": 507,
    "7271": 397,
    "1201": 493,
    "1202": 494,
    "1203": 492,
    "1204": 478,
    "1205": 475,
    "1206": 471,
    "1207": 468,
    "1208": 490,
    "1209": 464,
    "1210": 472,
    "1211": 467,
    "1212": 496,
    "1213": 476,
    "1214": 480,
    "1215": 485,
    "1216": 470,
    "1217": 487,
    "1218": 488,
    "1219": 465,
    "1220": 483,
    "1221": 482,
    "1222": 473,
    "1223": 474,
    "1224": 481,
    "1225": 479,
    "1271": 477,
    "1272": 486,
    "1273": 489,
    "1274": 491,
    "1275": 466,
    "1276": 495,
    "1277": 484,
    "1278": 469,
    "3401": 37,
    "3402": 35,
    "3403": 36,
    "3404": 38,
    "3471": 39,
}

_col_name_map = {
    "date": "date",
    "key": "key",
    "kasus": "total_confirmed",
    "kasus_baru": "new_confirmed",
    "kematian": "total_deceased",
    "kematian_baru": "new_deceased",
    "sembuh": "total_recovered",
    "sembuh_perhari": "new_recovered",
}


def _get_records(
    url_tpl: str, subregion_code_to_api_id_map: Dict[str, int], subregion_code: str
) -> List[Dict[str, Any]]:
    url = url_tpl.format(subregion_code_to_api_id_map[subregion_code])
    res = requests.get(url, timeout=60).json()
    if isinstance(res, dict):
        # province API like https://andrafarm.com/api/covid19/prov/11 returns a list but city/region API like
        # https://andrafarm.com/api/covid19/kota/43 returns a dict
        records = list(res.values())
    else:
        records = res
    [s.update({"subregion_code": subregion_code}) for s in records]
    return records


def _indonesian_date_to_isoformat(indo_date: str) -> str:
    """ Convert date like '18 Desember 2020' or '31 JulI 2020' to iso format"""
    indonesian_to_english_months = {
        "januari": "Jan",
        "februari": "Feb",
        "maret": "Mar",
        "april": "Apr",
        "mei": "May",
        "juni": "Jun",
        "juli": "Jul",
        "agustus": "Aug",
        "september": "Sep",
        "oktober": "Oct",
        "november": "Nov",
        "desember": "Dec",
    }
    eng_date = indo_date.lower()
    for indo, eng in indonesian_to_english_months.items():
        eng_date = eng_date.replace(indo, eng)
    date = datetime.datetime.strptime(eng_date, "%d %b %Y")
    return date.date().isoformat()


def _get_data(
    url_tpl: str,
    subregion_code_col: str,
    subregion_code_to_api_id_map: Dict[str, int],
    subregions: DataFrame,
) -> DataFrame:
    subregion_codes = subregions[subregion_code_col].values
    map_func = partial(_get_records, url_tpl, subregion_code_to_api_id_map)
    data = DataFrame.from_records(sum(thread_map(map_func, subregion_codes), []))
    data["date"] = data.apply(lambda r: _indonesian_date_to_isoformat(r.tgl), axis=1)
    # add location keys
    data = table_merge(
        [data, subregions], left_on="subregion_code", right_on=subregion_code_col, how="left"
    )
    data = table_rename(data, _col_name_map, drop=True)
    return data


# pylint: disable=missing-class-docstring,abstract-method
class IndonesiaAndrafarmDataSource(DataSource):
    def fetch(
        self,
        output_folder: Path,
        cache: Dict[str, str],
        fetch_opts: List[Dict[str, Any]],
        skip_existing: bool = False,
    ) -> Dict[str, str]:
        # URL is just a template, so pass-through the URL to parse manually
        return {source["class"]: source["url"] for source in fetch_opts}

    def parse(self, sources: Dict[str, str], aux: Dict[str, DataFrame], **parse_opts) -> DataFrame:
        subregion1s = country_subregion1s(aux["metadata"], "ID")
        subregion2s = country_subregion2s(aux["metadata"], "ID")
        data = concat(
            [
                _get_data(
                    sources["subregion1_url"],
                    "subregion1_code",
                    _subregion1_code_to_api_id_map,
                    subregion1s,
                ),
                _get_data(
                    sources["subregion2_url"],
                    "subregion2_code",
                    _subregion2_code_to_api_id_map,
                    subregion2s,
                ),
            ]
        )
        return data
